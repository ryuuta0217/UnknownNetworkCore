/*buildscript {
    dependencies {
        classpath files('libs/gradle/run-paper.jar')
    }
}*/

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'io.papermc.paperweight.userdev' version '1.5.+' // Enable Development of using Mojang Mapping.
    id 'xyz.jpenilla.run-paper' version '2.2.0' // Run Mojang Mapped or Spigot Mapped Server
    id 'com.github.johnrengelman.shadow' version '7.1.0' // fatJar
    id 'org.cadixdev.licenser' version '0.6.1' // Add License Header to source code headers.
    id "de.undercouch.download" version "4.1.2" // File Downloader
    id 'com.palantir.git-version' version '+' // Git Information Getter
}

//apply plugin: xyz.jpenilla.runpaper.RunPaper

group 'net.unknown'
version versionDetails().gitHash[0..7]

compileJava.dependsOn = ["licenseFormat"]
compileJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"
processResources.filteringCharset = "UTF-8"

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17
compileJava.options.release.set(17)

tasks.build.dependsOn(reobfJar)

configurations {
    launchwrapper
}

license {
    header = project.file("HEADER.txt")
    include '**/*.java'
    properties {
        organization = 'Unknown Network'
        year = 2023
    }
    newLine = true
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven/" }
    maven { url = "https://files.minecraftforge.net/maven/" }
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    maven { url = "https://maven.enginehub.org/repo/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://repo.yncrypt.net/repository/unknown-network/" }
    maven { url = "https://repo.onarandombox.com/content/groups/public/" } // Multiverse-(Core|Inventories|Portals|NetherPortals) repo
    maven { url = "https://maven.playpro.com/" } // CoreProtect
}

dependencies {
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:1.20.2-R0.1-SNAPSHOT")
    compileOnly fileTree(dir: "libs", include: "*.jar")
    compileOnly group: 'com.sk89q.worldguard', name: 'worldguard-bukkit', version: '+'
    compileOnly group: 'com.github.MilkBowl', name: 'VaultAPI', version: '+'
    compileOnly group: 'net.luckperms', name: 'api', version: '+'
    compileOnly group: 'net.unknown', name: 'UnknownNetworkBootstrap', version: '321aeae8'
    launchwrapper group: 'net.unknown', name: 'UnknownNetworkBootstrap', version: '321aeae8', classifier: 'spigot'
    implementation group: 'org.mozilla', name: 'rhino', version: '+'
    compileOnly group: 'com.github.NuVotifier', name: 'NuVotifier', version: '+'
    implementation group: 'net.dv8tion', name: 'JDA', version: '+'
    implementation group: 'org.json', name: 'json', version: '+'
    compileOnly group: 'com.onarandombox.multiversecore', name: 'Multiverse-Core', version: '+'
    compileOnly group: 'net.coreprotect', name: 'coreprotect', version: '+'
    //implementation group: 'io.netty', name: 'netty-buffer', version: '4.1.52.Final'
    //implementation group: 'io.netty', name: 'netty-handler', version: '4.1.52.Final'
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    filesMatching("*.yml") {
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
        filter ReplaceTokens, tokens: [version: "git-" + project.name + "-" + (versionDetails().branchName != null ? versionDetails().branchName : System.getenv("BRANCH_NAME")) + "-" + versionDetails().gitHash[0..7]]
    }
}

application {
    mainClass = 'net.unknown.UnknownNetworkCore'
}

jar {
    archiveFileName = "original-" + archiveBaseName.get() + "." + archiveExtension.get()
}

shadowJar {
    archiveFileName = archiveBaseName.get() + "-mojang." + archiveExtension.get()
}

reobfJar {
    outputJar = layout.buildDirectory.file("libs/${project.name}.jar")
}

runMojangMappedServer {
    runDirectory(project.file("testServer"))
    systemProperty "net.kyori.adventure.text.warnWhenLegacyFormattingDetected", "false"
    systemProperty "Paper.ignoreWorldDataVersion", "true"
    systemProperty "un.env", System.getProperty("un.env", "SURVIVAL")
    args("-P pluginsMapped")
}

runServer {
    runDirectory.set(project.file("testServer"))
    systemProperty "net.kyori.adventure.text.warnWhenLegacyFormattingDetected", "false" // default is false, but run-paper is set this option force true.
    systemProperty "Paper.ignoreWorldDataVersion", "true"
    systemProperty "un.env", System.getProperty("un.env", "SURVIVAL")
}

task runWrappedServer(type: JavaExec, dependsOn: reobfJar) {
    classpath(configurations.launchwrapper)
    args("--nogui", "--add-plugin=../build/libs/UnknownNetworkCore.jar")
    workingDir(project.file("testServer"))
    systemProperty "UnknownNetworkMagic", "1.20"
    systemProperty "un.env", System.getProperty("un.env", "SURVIVAL")
}

task downloadWaterfall(type: Task) {
    var wf = new File("libs/standalone/waterfall.jar")

    if (!wf.exists()) {
        download {
            src "https://api.papermc.io/v2/projects/waterfall/versions/1.19/builds/526/downloads/waterfall-1.19-526.jar"
            dest 'libs/standalone/waterfall.jar'
        }

        println "Downloaded waterfall.jar"
    }

    if (wf.exists()) {
        if(!file("libs/waterfall").exists()) {
            println "Extracting waterfall"

            copy {
                from zipTree(file("libs/standalone/waterfall.jar"))
                into file("libs/waterfall/")
            }

            println "Extracted waterfall"
        }

        if(file("libs/waterfall/com/mojang/brigadier").exists()) {
            println "Removing brigadier from extracted waterfall"

            delete {
                delete file("libs/waterfall/com/mojang/brigadier")
            }

            println "Removed brigadier from extracted waterfall"
        }
    }
}

task reCompressWaterfall(type: Zip, dependsOn: downloadWaterfall) {
    from "libs/waterfall/"
    destinationDirectory = file("libs")
    archiveFileName = "waterfall.jar"
}

task copyArtifactToProxy(type: Copy) {
    from project.file("build/libs/UnknownNetworkCore.jar")
    into project.file("testProxy/plugins")
}

artifacts {
    jar
    //sourceJar
    //javaDocJar
    shadowJar
    reobfJar
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'net.unknown'
            artifactId = project.name
            version = version
            artifact "build/libs/UnknownNetworkCore.jar"

            artifact("build/libs/UnknownNetworkCore-mojang.jar") {
                classifier "mojang"
            }

            pom {
                name = project.name
                description = "Unknown Network Core plugin"
                url = "https://www.mc-unknown.net/"
                inceptionYear = "2023"

                licenses {
                    license {
                        name = "All rights reserved"
                    }
                }

                developers {
                    developer {
                        id = "ryuuta0217"
                        name = "Ryuta Iwakura"
                        email = "ryuuta.iwakura@gmail.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url 'https://repo.ryuuta0217.com/repository/unknown-network/'
            credentials {
                username = System.getenv("NEXUS_USERNAME")
                password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}